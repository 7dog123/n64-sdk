<HTML><HEAD>
<TITLE></TITLE>
</HEAD></BODY>
<PRE><FONT COLOR="red">/*---------------------------------------------------------------------
	Copyright (C) 1997, Nintendo.
	
	File		gs2dex.h
	Coded    by	Yoshitaka Yasumoto.	Jul 31, 1997.
	Modified by	
	Comments	Header file for S2DEX ucode.
	
	$Id: gs2dex.h,v 1.21 1998/05/28 00:14:49 has Exp $
  ---------------------------------------------------------------------*/</FONT>

#ifndef	_GS2DEX_H_
#define	_GS2DEX_H_

#ifdef _LANGUAGE_C_PLUS_PLUS
extern &quot;C&quot; {
#endif

#include &lt;PR/ultratypes.h&gt;

<FONT COLOR="red">/*===========================================================================*
 *	Macro
 *===========================================================================*/</FONT>
#define	GS_CALC_DXT(line)	(((1&lt;&lt; G_TX_DXT_FRAC)-1)/(line)+1)
#define	GS_PIX2TMEM(pix, siz)	((pix)&gt;&gt;(4-(siz)))
#define	GS_PIX2DXT(pix, siz)	GS_CALC_DXT(GS_PIX2TMEM((pix), (siz)))

<FONT COLOR="red">/*===========================================================================*
 *	Data structures for S2DEX microcode
 *===========================================================================*/</FONT>

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Background
 *---------------------------------------------------------------------------*/</FONT>
#define	G_BGLT_LOADBLOCK	0x0033
#define	G_BGLT_LOADTILE		0xfff4

#define	G_BG_FLAG_FLIPS		0x01
#define	G_BG_FLAG_FLIPT		0x10

<FONT COLOR="red">/* Non scalable background plane */</FONT>
typedef	struct	{
  u16   imageX;		<FONT COLOR="red">/* テクスチャの左上位置 X 座標 (u10.5)        */</FONT> 
  u16	imageW;		<FONT COLOR="red">/* テクスチャの幅              (u10.2)        */</FONT>
  s16	frameX;		<FONT COLOR="red">/* 転送されるフレームの左上位置(s10.2)        */</FONT>
  u16	frameW;		<FONT COLOR="red">/* 転送されるフレームの幅      (u10.2)        */</FONT>

  u16   imageY; 	<FONT COLOR="red">/* テクスチャの左上位置 Y 座標 (u10.5)        */</FONT> 
  u16	imageH;		<FONT COLOR="red">/* テクスチャの高さ            (u10.2)        */</FONT>
  s16	frameY;		<FONT COLOR="red">/* 転送されるフレームの左上位置(s10.2)        */</FONT>
  u16	frameH;		<FONT COLOR="red">/* 転送されるフレームの高さ    (u10.2)        */</FONT>

  u64  *imagePtr;	<FONT COLOR="red">/* DRAM 上のテクスチャソースアドレス          */</FONT>
  u16	imageLoad;	<FONT COLOR="red">/* LoadBlock, LoadTile のどちらを使用するか   */</FONT>
  u8	imageFmt;	<FONT COLOR="red">/* テクセルのフォーマット G_IM_FMT_*          */</FONT>
  u8	imageSiz;	<FONT COLOR="red">/* テクセルのサイズ       G_IM_SIZ_*          */</FONT>
  u16   imagePal; 	<FONT COLOR="red">/* パレット番号                               */</FONT>
  u16	imageFlip;	<FONT COLOR="red">/* イメージの左右反転  G_BG_FLAG_FLIPS で反転 */</FONT>

  <FONT COLOR="red">/* 以下は初期化ルーチン guS2DInitBg() 内で設定されるのでユーザが設
     定する必要はない */</FONT>
  u16	tmemW;		<FONT COLOR="red">/* frame 1 ラインの TMEM 幅 Word サイズ
                           LoadBlock の時 GS_PIX2TMEM(imageW/4,imageSiz)
                           LoadTile  の時 GS_PIX2TMEM(frameW/4,imageSiz)+1 */</FONT>
  u16	tmemH;		<FONT COLOR="red">/* 一度にロードできる TMEM 高さ (s13.2) 4倍値
			   通常テクスチャの時   512/tmemW*4
			   CI  テクスチャの時   256/tmemW*4           */</FONT>
  u16	tmemLoadSH;	<FONT COLOR="red">/* SH 値
			   LoadBlock の時 tmemSize/2-1
			   LoadTile  の時 tmemW*16-1                  */</FONT>
  u16	tmemLoadTH;	<FONT COLOR="red">/* TH 値 or Stride 値
			   LoadBlock の時 GS_CALC_DXT(tmemW)
			   LoadTile  の時 tmemH-1                     */</FONT>
  u16	tmemSizeW;	<FONT COLOR="red">/* image 1 ライン分の imagePtr のスキップ値 
			   LoadBlock の時 tmemW*2
                           LoadTile  の時 GS_PIX2TMEM(imageW/4,imageSiz)*2 */</FONT>
  u16	tmemSize;	<FONT COLOR="red">/* ロード一回分の imagePtr のスキップ値 
			   = tmemSizeW*tmemH                          */</FONT>
} uObjBg_t;		<FONT COLOR="red">/* 40 bytes */</FONT>

<FONT COLOR="red">/* Scalable background plane */</FONT>
typedef	struct	{
  u16   imageX;		<FONT COLOR="red">/* テクスチャの左上位置 X 座標 (u10.5)        */</FONT> 
  u16	imageW;		<FONT COLOR="red">/* テクスチャの幅              (u10.2)        */</FONT>
  s16	frameX;		<FONT COLOR="red">/* 転送されるフレームの左上位置(s10.2)        */</FONT>
  u16	frameW;		<FONT COLOR="red">/* 転送されるフレームの幅      (u10.2)        */</FONT>

  u16   imageY; 	<FONT COLOR="red">/* テクスチャの左上位置 Y 座標 (u10.5)        */</FONT> 
  u16	imageH;		<FONT COLOR="red">/* テクスチャの高さ            (u10.2)        */</FONT>
  s16	frameY;		<FONT COLOR="red">/* 転送されるフレームの左上位置(s10.2)        */</FONT>
  u16	frameH;		<FONT COLOR="red">/* 転送されるフレームの高さ    (u10.2)        */</FONT>

  u64  *imagePtr;	<FONT COLOR="red">/* DRAM 上のテクスチャソースアドレス          */</FONT>
  u16	imageLoad;	<FONT COLOR="red">/* LoadBlock, LoadTile のどちらを使用するか   */</FONT>
  u8	imageFmt;	<FONT COLOR="red">/* テクセルのフォーマット G_IM_FMT_*          */</FONT>
  u8	imageSiz;	<FONT COLOR="red">/* テクセルのサイズ       G_IM_SIZ_*          */</FONT>
  u16   imagePal; 	<FONT COLOR="red">/* パレット番号                               */</FONT>
  u16	imageFlip;	<FONT COLOR="red">/* イメージの左右反転  G_BG_FLAG_FLIPS で反転 */</FONT>

  u16	scaleW;		<FONT COLOR="red">/* X 方向スケール値               (u5.10)     */</FONT>
  u16	scaleH;		<FONT COLOR="red">/* Y 方向スケール値               (u5.10)     */</FONT>
  s32	imageYorig;	<FONT COLOR="red">/* image における描画始点         (s20.5)     */</FONT>
  
  u8	padding[4];
  
} uObjScaleBg_t;	<FONT COLOR="red">/* 40 bytes */</FONT>

typedef union {
  uObjBg_t        b;
  uObjScaleBg_t   s;
  long long int   force_structure_alignment;
} uObjBg;

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	2D Objects
 *---------------------------------------------------------------------------*/</FONT>
#define	G_OBJ_FLAG_FLIPS	1&lt;&lt;0		<FONT COLOR="red">/* S 方向反転 */</FONT>
#define	G_OBJ_FLAG_FLIPT	1&lt;&lt;4		<FONT COLOR="red">/* T 方向反転 */</FONT>

typedef struct {
  s16  objX;		<FONT COLOR="red">/* s10.2 OBJ 左上端 X 座標                 */</FONT>
  u16  scaleW;		<FONT COLOR="red">/* u5.10 幅方向スケーリング                */</FONT>
  u16  imageW;		<FONT COLOR="red">/* u10.5 テクスチャの幅   (S 方向の長さ)   */</FONT>
  u16  paddingX;	<FONT COLOR="red">/* 未使用 常に 0                           */</FONT>
  s16  objY;		<FONT COLOR="red">/* s10.2 OBJ 左上端 Y 座標                 */</FONT>
  u16  scaleH;		<FONT COLOR="red">/* u5.10 高さ方向スケーリング              */</FONT>
  u16  imageH;		<FONT COLOR="red">/* u10.5 テクスチャの高さ (T 方向の長さ)   */</FONT>
  u16  paddingY;	<FONT COLOR="red">/* 未使用 常に 0                           */</FONT>
  u16  imageStride;	<FONT COLOR="red">/* テクセルの折り返し幅        (64bit word 単位) */</FONT>
  u16  imageAdrs;	<FONT COLOR="red">/* TMEM 内のテクスチャ先頭位置 (64bit word 単位) */</FONT>  
  u8   imageFmt;	<FONT COLOR="red">/* テクセルのフォーマット G_IM_FMT_*       */</FONT>
  u8   imageSiz;	<FONT COLOR="red">/* テクセルのサイズ       G_IM_SIZ_*       */</FONT>
  u8   imagePal;	<FONT COLOR="red">/* パレット番号 0-7                        */</FONT>
  u8   imageFlags;	<FONT COLOR="red">/* 表示フラグ  G_OBJ_FLAG_FLIP*            */</FONT>
} uObjSprite_t;		<FONT COLOR="red">/* 24 bytes */</FONT>

typedef union {
  uObjSprite_t      s;
  long long int   force_structure_alignment;
} uObjSprite;

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	2D Matrix
 *---------------------------------------------------------------------------*/</FONT>
typedef struct {
  s32   A, B, C, D;     <FONT COLOR="red">/* s15.16 */</FONT>
  s16   X, Y;           <FONT COLOR="red">/* s10.2  */</FONT>
  u16   BaseScaleX;	<FONT COLOR="red">/* u5.10  */</FONT>
  u16   BaseScaleY;	<FONT COLOR="red">/* u5.10  */</FONT>
} uObjMtx_t;		<FONT COLOR="red">/* 24 bytes */</FONT>

typedef union {
  uObjMtx_t	m;
  long long int force_structure_alignment;
} uObjMtx;

typedef struct {
  s16   X, Y;           <FONT COLOR="red">/* s10.2  */</FONT>
  u16   BaseScaleX;	<FONT COLOR="red">/* u5.10  */</FONT>
  u16   BaseScaleY;	<FONT COLOR="red">/* u5.10  */</FONT>
} uObjSubMtx_t;		<FONT COLOR="red">/* 8 bytes */</FONT>

typedef union {
  uObjSubMtx_t	m;
  long long int force_structure_alignment;
} uObjSubMtx;

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Loading into TMEM
 *---------------------------------------------------------------------------*/</FONT>
#define	G_OBJLT_TXTRBLOCK	0x00001033
#define	G_OBJLT_TXTRTILE	0x00fc1034
#define	G_OBJLT_TLUT		0x00000030

#define	GS_TB_TSIZE(pix,siz)	(GS_PIX2TMEM((pix),(siz))-1)
#define	GS_TB_TLINE(pix,siz)	(GS_CALC_DXT(GS_PIX2TMEM((pix),(siz))))

typedef	struct	{
  u32	type;		<FONT COLOR="red">/* Type 種別 G_OBJLT_TXTRBLOCK                    */</FONT>
  u64	*image;		<FONT COLOR="red">/* DRAM 上のテクスチャソースアドレス              */</FONT>
  u16	tmem;		<FONT COLOR="red">/* ロード先の TMEM ワードアドレス (8byteWORD)     */</FONT>
  u16	tsize;		<FONT COLOR="red">/* Texture サイズ     マクロ GS_TB_TSIZE() で指定 */</FONT>
  u16	tline;		<FONT COLOR="red">/* Texture 1 ライン幅 マクロ GS_TB_TLINE() で指定 */</FONT>
  u16	sid;		<FONT COLOR="red">/* STATE ID  4 の倍数で 0,4,8,12 のどれか         */</FONT>
  u32	flag;		<FONT COLOR="red">/* STATE flag  */</FONT>
  u32	mask;		<FONT COLOR="red">/* STATE mask  */</FONT>
} uObjTxtrBlock_t;		<FONT COLOR="red">/* 24 bytes */</FONT>

#define	GS_TT_TWIDTH(pix,siz)	((GS_PIX2TMEM((pix), (siz))&lt;&lt;2)-1)
#define	GS_TT_THEIGHT(pix,siz)	(((pix)&lt;&lt;2)-1)

typedef	struct	{
  u32	type;		<FONT COLOR="red">/* Type 種別 G_OBJLT_TXTRTILE                     */</FONT>
  u64	*image;		<FONT COLOR="red">/* DRAM 上のテクスチャソースアドレス              */</FONT>
  u16	tmem;		<FONT COLOR="red">/* ロード先の TMEM ワードアドレス (8byteWORD)     */</FONT>
  u16	twidth;		<FONT COLOR="red">/* Texture 幅      マクロ GS_TT_TWIDTH()  で指定  */</FONT>
  u16	theight;	<FONT COLOR="red">/* Texture 高さ    マクロ GS_TT_THEIGHT() で指定  */</FONT>
  u16	sid;		<FONT COLOR="red">/* STATE ID  4 の倍数で 0,4,8,12 のどれか         */</FONT>
  u32	flag;		<FONT COLOR="red">/* STATE flag  */</FONT>
  u32	mask;		<FONT COLOR="red">/* STATE mask  */</FONT>
} uObjTxtrTile_t;		<FONT COLOR="red">/* 24 bytes */</FONT>

#define	GS_PAL_HEAD(head)	((head)+256)
#define	GS_PAL_NUM(num)		((num)-1)

typedef	struct	{
  u32	type;		<FONT COLOR="red">/* Type 種別 G_OBJLT_TLUT                         */</FONT>
  u64	*image;		<FONT COLOR="red">/* DRAM 上のテクスチャソースアドレス              */</FONT>
  u16	phead;		<FONT COLOR="red">/* ロード先頭のパレット番号 256 以上 511 以下     */</FONT>
  u16	pnum;		<FONT COLOR="red">/* ロードするパレット数 - 1                       */</FONT>
  u16   zero;		<FONT COLOR="red">/* 常に 0 を代入する                              */</FONT>
  u16	sid;		<FONT COLOR="red">/* STATE ID  4 の倍数で 0,4,8,12 のどれか         */</FONT>
  u32	flag;		<FONT COLOR="red">/* STATE flag  */</FONT>
  u32	mask;		<FONT COLOR="red">/* STATE mask  */</FONT>
} uObjTxtrTLUT_t;		<FONT COLOR="red">/* 24 bytes */</FONT>

typedef union {
  uObjTxtrBlock_t      block;
  uObjTxtrTile_t       tile;
  uObjTxtrTLUT_t       tlut;
  long long int   force_structure_alignment;
} uObjTxtr;

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Loading into TMEM &amp; 2D Objects
 *---------------------------------------------------------------------------*/</FONT>
typedef	struct	{
  uObjTxtr	txtr;
  uObjSprite	sprite;
} uObjTxSprite;		<FONT COLOR="red">/* 48 bytes */</FONT>

<FONT COLOR="red">/*===========================================================================*
 *	GBI Commands for S2DEX microcode
 *===========================================================================*/</FONT>
<FONT COLOR="red">/* GBI Header */</FONT>
#ifdef	F3DEX_GBI_2
#define	G_OBJ_RECTANGLE_R	0xda
#define	G_OBJ_MOVEMEM		0xdc
#define	G_RDPHALF_0		0xe4
#define	G_OBJ_RECTANGLE		0x01
#define	G_OBJ_SPRITE		0x02
#define	G_SELECT_DL		0x04
#define	G_OBJ_LOADTXTR		0x05
#define	G_OBJ_LDTX_SPRITE	0x06
#define	G_OBJ_LDTX_RECT		0x07
#define	G_OBJ_LDTX_RECT_R	0x08
#define	G_BG_1CYC		0x09
#define	G_BG_COPY		0x0a
#define	G_OBJ_RENDERMODE	0x0b
#else
#define	G_BG_1CYC		0x01
#define	G_BG_COPY		0x02
#define	G_OBJ_RECTANGLE		0x03
#define	G_OBJ_SPRITE		0x04
#define	G_OBJ_MOVEMEM		0x05
#define	G_SELECT_DL		0xb0
#define	G_OBJ_RENDERMODE	0xb1
#define	G_OBJ_RECTANGLE_R	0xb2
#define	G_OBJ_LOADTXTR		0xc1
#define	G_OBJ_LDTX_SPRITE	0xc2
#define	G_OBJ_LDTX_RECT		0xc3
#define	G_OBJ_LDTX_RECT_R	0xc4
#define	G_RDPHALF_0		0xe4
#endif

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Background wrapped screen
 *---------------------------------------------------------------------------*/</FONT>
#define	gSPBgRectangle(pkt, m, mptr)  gDma0p((pkt),(m),(mptr),0)
#define	gsSPBgRectangle(m, mptr)      gsDma0p(     (m),(mptr),0)
#define	gSPBgRectCopy(pkt, mptr)      gSPBgRectangle((pkt), G_BG_COPY, (mptr))
#define	gsSPBgRectCopy(mptr)	      gsSPBgRectangle(      G_BG_COPY, (mptr))
#define	gSPBgRect1Cyc(pkt, mptr)      gSPBgRectangle((pkt), G_BG_1CYC, (mptr))
#define	gsSPBgRect1Cyc(mptr)	      gsSPBgRectangle(      G_BG_1CYC, (mptr))

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	2D Objects
 *---------------------------------------------------------------------------*/</FONT>
#define	gSPObjSprite(pkt, mptr)       gDma0p((pkt),G_OBJ_SPRITE,     (mptr),0)
#define	gsSPObjSprite(mptr)           gsDma0p(     G_OBJ_SPRITE,     (mptr),0)
#define	gSPObjRectangle(pkt, mptr)    gDma0p((pkt),G_OBJ_RECTANGLE,  (mptr),0)
#define	gsSPObjRectangle(mptr)        gsDma0p(     G_OBJ_RECTANGLE,  (mptr),0)
#define	gSPObjRectangleR(pkt, mptr)   gDma0p((pkt),G_OBJ_RECTANGLE_R,(mptr),0)
#define	gsSPObjRectangleR(mptr)       gsDma0p(     G_OBJ_RECTANGLE_R,(mptr),0)

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	2D Matrix
 *---------------------------------------------------------------------------*/</FONT>
#define	gSPObjMatrix(pkt, mptr)	      gDma1p((pkt),G_OBJ_MOVEMEM,(mptr),0,23)
#define	gsSPObjMatrix(mptr)           gsDma1p(     G_OBJ_MOVEMEM,(mptr),0,23)
#define	gSPObjSubMatrix(pkt, mptr)    gDma1p((pkt),G_OBJ_MOVEMEM,(mptr),2, 7)
#define	gsSPObjSubMatrix(mptr)        gsDma1p(     G_OBJ_MOVEMEM,(mptr),2, 7)

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Loading into TMEM
 *---------------------------------------------------------------------------*/</FONT>
#define	gSPObjLoadTxtr(pkt, tptr)     gDma0p((pkt),G_OBJ_LOADTXTR,   (tptr),23)
#define	gsSPObjLoadTxtr(tptr)         gsDma0p(     G_OBJ_LOADTXTR,   (tptr),23)
#define	gSPObjLoadTxSprite(pkt, tptr) gDma0p((pkt),G_OBJ_LDTX_SPRITE,(tptr),47)
#define	gsSPObjLoadTxSprite(tptr)     gsDma0p(     G_OBJ_LDTX_SPRITE,(tptr),47)
#define	gSPObjLoadTxRect(pkt, tptr)   gDma0p((pkt),G_OBJ_LDTX_RECT,  (tptr),47)
#define	gsSPObjLoadTxRect(tptr)       gsDma0p(     G_OBJ_LDTX_RECT,  (tptr),47)
#define	gSPObjLoadTxRectR(pkt, tptr)  gDma0p((pkt),G_OBJ_LDTX_RECT_R,(tptr),47)
#define	gsSPObjLoadTxRectR(tptr)      gsDma0p(     G_OBJ_LDTX_RECT_R,(tptr),47)

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Select Display List
 *---------------------------------------------------------------------------*/</FONT>
#define	gSPSelectDL(pkt, mptr, sid, flag, mask)	\
{	gDma1p((pkt), G_RDPHALF_0, (flag), (u32)(mptr) &amp; 0xffff, (sid)); \
	gDma1p((pkt), G_SELECT_DL, (mask), (u32)(mptr) &gt;&gt; 16, G_DL_PUSH); }
#define	gsSPSelectDL(mptr, sid, flag, mask)	\
{	gsDma1p(G_RDPHALF_0, (flag), (u32)(mptr) &amp; 0xffff, (sid)); \
	gsDma1p(G_SELECT_DL, (mask), (u32)(mptr) &gt;&gt; 16, G_DL_PUSH); }
#define	gSPSelectBranchDL(pkt, mptr, sid, flag, mask)	\
{	gDma1p((pkt), G_RDPHALF_0, (flag), (u32)(mptr) &amp; 0xffff, (sid)); \
	gDma1p((pkt), G_SELECT_DL, (mask), (u32)(mptr) &gt;&gt; 16, G_DL_NOPUSH); }
#define	gsSPSelectBranchDL(mptr, sid, flag, mask)	\
{	gsDma1p(G_RDPHALF_0, (flag), (u32)(mptr) &amp; 0xffff, (sid)); \
	gsDma1p(G_SELECT_DL, (mask), (u32)(mptr) &gt;&gt; 16, G_DL_NOPUSH); }

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Set general status
 *---------------------------------------------------------------------------*/</FONT>
#define	G_MW_GENSTAT	0x08	<FONT COLOR="red">/* G_MW_FOG と同じ値なので注意 */</FONT>

#define	gSPSetStatus(pkt, sid, val)	\
	gMoveWd((pkt), G_MW_GENSTAT, (sid), (val))
#define	gsSPSetStatus(sid, val)	\
	gsMoveWd(      G_MW_GENSTAT, (sid), (val))

<FONT COLOR="red">/*---------------------------------------------------------------------------*
 *	Set Object Render Mode
 *---------------------------------------------------------------------------*/</FONT>
#define	G_OBJRM_NOTXCLAMP	0x01
#define	G_OBJRM_XLU		0x02	<FONT COLOR="red">/* Ignored */</FONT>
#define	G_OBJRM_ANTIALIAS	0x04	<FONT COLOR="red">/* Ignored */</FONT>
#define	G_OBJRM_BILERP		0x08
#define	G_OBJRM_SHRINKSIZE_1	0x10
#define	G_OBJRM_SHRINKSIZE_2	0x20
#define	G_OBJRM_WIDEN		0x40

#define	gSPObjRenderMode(pkt, mode)   gImmp1((pkt),G_OBJ_RENDERMODE,(mode))
#define	gsSPObjRenderMode(mode)	      gsImmp1(     G_OBJ_RENDERMODE,(mode))

<FONT COLOR="red">/*===========================================================================*
 *	Render Mode Macro
 *===========================================================================*/</FONT>
#define RM_RA_SPRITE(clk)                                      \
        AA_EN | CVG_DST_CLAMP |                                \
        CVG_X_ALPHA | ALPHA_CVG_SEL | ZMODE_OPA | TEX_EDGE |   \
        GBL_c##clk(G_BL_CLR_IN, G_BL_A_IN, G_BL_CLR_MEM, G_BL_1MA)

#define G_RM_SPRITE		G_RM_OPA_SURF
#define G_RM_SPRITE2		G_RM_OPA_SURF2
#define G_RM_RA_SPRITE  	RM_RA_SPRITE(1)
#define G_RM_RA_SPRITE2		RM_RA_SPRITE(2)
#define G_RM_AA_SPRITE		G_RM_AA_TEX_TERR
#define G_RM_AA_SPRITE2		G_RM_AA_TEX_TERR2
#define G_RM_XLU_SPRITE		G_RM_XLU_SURF
#define G_RM_XLU_SPRITE2	G_RM_XLU_SURF2
#define G_RM_AA_XLU_SPRITE	G_RM_AA_XLU_SURF
#define G_RM_AA_XLU_SPRITE2	G_RM_AA_XLU_SURF2

<FONT COLOR="red">/*===========================================================================*
 *	External functions 
 *===========================================================================*/</FONT>
extern	u64	gspS2DEX_fifoTextStart[], gspS2DEX_fifoTextEnd[];
extern	u64	gspS2DEX_fifoDataStart[], gspS2DEX_fifoDataEnd[];
extern	u64	gspS2DEX_fifo_dTextStart[], gspS2DEX_fifo_dTextEnd[];
extern	u64	gspS2DEX_fifo_dDataStart[], gspS2DEX_fifo_dDataEnd[];
extern	u64	gspS2DEX2_fifoTextStart[], gspS2DEX2_fifoTextEnd[];
extern	u64	gspS2DEX2_fifoDataStart[], gspS2DEX2_fifoDataEnd[];
extern	u64	gspS2DEX2_xbusTextStart[], gspS2DEX2_xbusTextEnd[];
extern	u64	gspS2DEX2_xbusDataStart[], gspS2DEX2_xbusDataEnd[];
extern	void	guS2DInitBg(uObjBg *);

#ifdef	F3DEX_GBI_2
# define guS2DEmuBgRect1Cyc	guS2D2EmuBgRect1Cyc	<FONT COLOR="red">/*Wrapper*/</FONT>
# define guS2DEmuSetScissor	guS2D2EmuSetScissor	<FONT COLOR="red">/*Wrapper*/</FONT>
  extern void	guS2D2EmuSetScissor(u32, u32, u32, u32, u8);
  extern void	guS2D2EmuBgRect1Cyc(Gfx **, uObjBg *);
#else
  extern void	guS2DEmuSetScissor(u32, u32, u32, u32, u8);
  extern void	guS2DEmuBgRect1Cyc(Gfx **, uObjBg *);
#endif

#ifdef _LANGUAGE_C_PLUS_PLUS
}
#endif
#endif <FONT COLOR="red">/* _GS2DEX_H_ */</FONT>

<FONT COLOR="red">/*======== End of gs2dex.h ========*/</FONT>
</PRE>
</BODY>
