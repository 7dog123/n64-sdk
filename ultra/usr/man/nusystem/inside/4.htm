<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<body bgcolor="#FFFFFF">

<p><font size="5"><b><img src="../../gif/nusystem2.gif"
width="176" height="30"></b></font><a name="top"><font size="6"><strong> </strong></font><font
size="5">&quot;INSIDE NuSystem&quot;</font></a></p>

<p><font size="4"><strong><a href="#1">4.1 What the Graphics Manager Does</a><br>
<a href="#2">4.2 How to Customize the Graphics Manager</a></strong></font></p>

<hr>

<p><strong><a name="1"><font size="5">4.1  What the Graphics Manager Does</font><font size="5"> </font></a></strong></p>

<p>NuSystem graphics management consists of the graphics thread, the Graphics Manager thread, and the graphics setting functions.
<br>
<br>
The graphics thread is created and executed by the nuGfxThreadStart function. It executes a retrace callback function or PRE-NMI callback function registered by the application. (The nuGfxThreadStart function is called in the nuGfxInit function.) The graphics thread is first registered as a client in the Scheduler so that it can receive retrace and PRE-NMI event messages. If it receives a retrace message, it executes the callback function registered by the nuGfxFuncSet function. However, if it receives a PRE-NMI event message, it executes the callback function registered by the nuGfxPreNMIFuncSet function as shown here:
</p>

<I><B>Figure 4.1</B> -- Graphics Thread Process Flow</I>
<p><img src="../../gif/nusys-8.gif"></p>

<p>The Graphics Stack Manager consists of the nuGfxTaskStart function and the Graphics Task Manager thread.
</p>

<p>The nuGfxTaskStart function receives the display list buffer pointer, size, and microcode type from your application, as well as the frame buffer swap flag. It sets these values in the task structure. It then sends this task structure as a message to the graphics task thread.
</p>

<p>The graphics task thread sends an end message to the Graphics Task Manager when the task is complete. The Graphics Task Manager checks messages, and in the case of an end message or buffer swap message, it uses the ViSwapBuffer function to swap the frame buffer. This is shown in Figure 4.2. 
</p>

<I><B>Figure 4.2</B> -- Activation of a Graphics Task</I>
<p><img src="../../gif/nusys-9.gif"></p>

<p>Task structures are in ring buffers and are automatically swapped by the nuGfxTaskStart function. The size of the graphics task thread message queue is 8, and if more than eight messages are sent in block mode, the transmitted threads will wait until the queue opens up. Because this can be used to accommodate more than 8 task structures, the size of the task structure is 10 ring buffers. 
</p>

<p>The internal processing of the nuGfxTaskStart function differs depending on whether NU_SC_SWAPBUFFER or NU_SC_NOSWAPBUFFER is specified in the argument. In the case of NU_SC_SWAPBUFFER, a flag specifies that the frame buffer can be swapped by a task-end message, and the value of the variable nuGfxCfb_ptr is changed. The value of nuGfxCfb_ptr is set in the order of the frame buffer address table which is entered by the nuGfxSetCfb function. The frame buffer address table is defined as a frame buffer pointer array by the nuGfxInit function in this way:</p>

<pre><font size="3">	static u16* FrameBuf[3] = {
		(u16*)NU_GFX_FRAMEBUFFER0_ADDR,
		(u16*)NU_GFX_FRAMEBUFFER1_ADDR,
		(u16*)NU_GFX_FRAMEBUFFER2_ADDR
	};
	....
	void nuGfxInit(void)
	{
		....
		nuGfxSetCfb(FrameBuf, 3):
		....
	}</font></pre>

<p>The value of nuGfxCfb_ptr is entered into the task structure by the nuGfxTaskStart function and passed to the Graphics Task Manager after a task is completed. The value is then passed as an argument of the frame buffer swap callback function (the nuGfxSwapCfb function is registered as the callback in the nuGfxInit function). The callback function, by passing the argument value to the osViSwapBuffer function, can specify which frame buffer to display next. If you change the value of nuGfxCfb_ptr before calling the nuGfxTaskStart function, the frame buffer with that value can be displayed.
</p>

<p><a href="#top"><img src="../../gif/index.gif" border="0" width="65" height="17"></a></p>

<hr>

<p><a name="2"><font size="5"><strong>4.2 How to Customize the Graphics Manager</strong></font></a></p>

<p>By calling appropriate functions, the nuGfxInit function does the following to set the defaults for the graphics settings:
</p>

<UL>
<LI>Activates the graphics thread by calling the nuGfxThreadStart function.
<LI>Enters the frame buffer address table by calling the nuGfxSetCfb function.
<LI>Sets the frame buffer size by calling the nuGfxSetCfb function.
<LI>Sets the Z-Buffer address by calling the nuGfxSetZBuffer function.
<LI>Enters the frame buffer swap callback function by calling the nuGfxSwapCfbFuncSet function.
<LI>Enters the graphics microcode array by calling the nuGfxSetUCode function.
<LI>Activates the Graphics Task Manager by calling the nuGfxTaskMgrInit function.
<LI>Initializes the RDP (reality display processor).
</UL>

<p>As this list shows, there are many functions, so if you do not use the nuGfxInit function, you can use these other functions to set the graphics for your application. Note that to change the Z-Buffer address setting and the graphics microcode array, you need to change the spec file.
</p>

<p>When the nuGfxSetUCode function is called, all of the Fast3D graphics microcode presently in use is entered. Therefore, by deleting all microcode that is ultimately unnecessary for the application, you can open up a little more ROM space. Because this action is related to the microcode array defined in the nuGfxInit function, to do it, you will need to initialize all eight items in the list within your application. But this is not a big job; all you need to do is copy the nuGfxInit function source code into your application source code, and then change the necessary parts. It is a good idea to try out several different pieces of the microcode so that you can check the performance of each and see how they display differently.
</p>

<p>The following additional information shows you how to change the graphics microcode to fit the needs of your game application. Any change to the default microcode setting involves the deletion of microcode. In the following example all microcode is deleted except F3DEX and L3DED, leaving only N_Audio microcode. Start by changing the spec file. The following segment of the spec file defines microcode:
</p>

<pre><font size="3">beginseg
	name &quot;code&quot;
	flags BOOT OBJECT
	entry nuBoot
	address NU_SPEC_BOOT_ADDR
	stack NU_SPEC_BOOT_STACK
	include &quot;codesegment.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/rspboot.o&quot;
<b><i>	include &quot;$(ROOT)/usr/lib/PR/aspMain.o&quot;
</i></b>	include &quot;$(ROOT)/usr/lib/PR/n_aspMain.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DEX.fifo.o&quot;
<b><i>	include &quot;$(ROOT)/usr/lib/PR/gspF3DEX.NoN.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DLX.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DLX.NoN.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DLX.Rej.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DLP.Rej.fifo.o&quot;
</i></b>	include &quot;$(ROOT)/usr/lib/PR/gspL3DEX.fifo.o&quot;
<b><i>	include &quot;$(ROOT)/usr/lib/PR/gspS2DEX.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspS2DEX.fifo_d.o&quot;
</i></b>endseg</font></pre>

<pre><font size="4">You can delete the lines in boldface type thus changing the code segment to this:</font></pre>

<pre><font size="3">beginseg
	name &quot;code&quot;
	flags BOOT OBJECT
	entry nuBoot
	address NU_SPEC_BOOT_ADDR
	stack NU_SPEC_BOOT_STACK
	include &quot;codesegment.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/rspboot.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/n_aspMain.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspF3DEX.fifo.o&quot;
	include &quot;$(ROOT)/usr/lib/PR/gspL3DEX.fifo.o&quot;
endseg</font></pre>

<p>That's all you need to do to modify the spec file. The next step is to copy nugfxinit.c from the NuSystem source code directory to the application directory, and then change the name of the copied file. For this example, rename it to appgfxinit.c. Now you can change the contents of this file to customize the graphics settings. For example, you might change the following portion of the appgfxinit.c file: 
</p>

<pre><font size="3">//line 17
static NUUcode nugfx_ucode[] = {
	{(u64*)gspF3DEX_fifoTextStart,(u64*)gspF3DEX_fifoDataStart}, 
<b><i>	{(u64*)gspF3DEX_NoN_fifoTextStart,(u64*)gspF3DEX_NoN_fifoDataStart}, 
	{(u64*)gspF3DLX_fifoTextStart, (u64*)gspF3DLX_fifoDataStart}, 
	{(u64*)gspF3DLX_NoN_fifoTextStart,(u64*)gspF3DLX_NoN_fifoDataStart}, 
	{(u64*)gspF3DLX_Rej_fifoTextStart,(u64*)gspF3DLX_Rej_fifoDataStart}, 
	{(u64*)gspF3DLP_Rej_fifoTextStart,(u64*)gspF3DLP_Rej_fifoDataStart}, 
</i></b>	{(u64*)gspL3DEX_fifoTextStart, (u64*)gspL3DEX_fifoDataStart},
<b><i>	{(u64*)gspS2DEX_fifoTextStart, (u64*)gspS2DEX_fifoDataStart}, 
	{(u64*)gspS2DEX_fifo_dTextStart, (u64*)gspS2DEX_fifo_dDataStart}, 
</i></b>};</font></pre>

<p>Delete the red lines to make the code section look like this:</p>

<pre><font size="3">static NUUcode nugfx_ucode[] = {
	{(u64*)gspF3DEX_fifoTextStart, (u64*)gspF3DEX_fifoDataStart}, 
	{(u64*)gspL3DEX_fifoTextStart, (u64*)gspL3DEX_fifoDataStart},
};</font></pre>

<p>Now, change the function name from nuGfxInit(void) to appGfxInit(void), and you have prepared the graphics set for use by your application.</p>

<p><a href="#top"><img src="../../gif/index.gif" border="0" width="65" height="17"></a></p>

<hr>
</body>
</html>
